package com.inter.trade.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CREDIT_CARD_RECORD.
*/
public class CreditCardRecordDao extends AbstractDao<CreditCardRecord, Long> {

    public static final String TABLENAME = "CREDIT_CARD_RECORD";

    /**
     * Properties of entity CreditCardRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User = new Property(1, String.class, "user", false, "USER");
        public final static Property Creditcard = new Property(2, String.class, "creditcard", false, "CREDITCARD");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Idcard = new Property(4, String.class, "idcard", false, "IDCARD");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
    };


    public CreditCardRecordDao(DaoConfig config) {
        super(config);
    }
    
    public CreditCardRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CREDIT_CARD_RECORD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER' TEXT," + // 1: user
                "'CREDITCARD' TEXT," + // 2: creditcard
                "'NAME' TEXT," + // 3: name
                "'IDCARD' TEXT," + // 4: idcard
                "'PHONE' TEXT);"); // 5: phone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CREDIT_CARD_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CreditCardRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(2, user);
        }
 
        String creditcard = entity.getCreditcard();
        if (creditcard != null) {
            stmt.bindString(3, creditcard);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String idcard = entity.getIdcard();
        if (idcard != null) {
            stmt.bindString(5, idcard);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CreditCardRecord readEntity(Cursor cursor, int offset) {
        CreditCardRecord entity = new CreditCardRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // creditcard
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // idcard
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // phone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CreditCardRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreditcard(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdcard(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CreditCardRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CreditCardRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
